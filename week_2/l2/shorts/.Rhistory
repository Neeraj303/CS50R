# BE221 Assignment 1
# Submitted by Neeraj Dhandia, 22808
install.packages('IRkernel')
ok
library(BoolNet)
vignette("BoolNet_package_vignette")
getwd()
cd ND
ls
ls
getwd()
# Load the BoolNet package
library(BoolNet)
# Define the network
network <- "
targets, factors
Gene1, Gene3
Gene2, Gene1 or Gene3
Gene3, gene2
"
# Write the network to a file
writeLines(network, con = "network.txt")
# Load the network
net <- loadNetwork("network.txt")
# Define the network
network <- "
targets, factors
Gene1, Gene3
Gene2, Gene1 or Gene3
Gene3, Gene2
"
# Write the network to a file
writeLines(network, con = "network.txt")
# Load the network
net <- loadNetwork("network.txt")
# Define the network
network <- "
targets, factors
Gene1, Gene3
Gene2, Gene1 | Gene2
Gene3, Gene2
"
# Write the network to a file
writeLines(network, con = "network.txt")
# Load the network
net <- loadNetwork("network.txt")
# Simulate the network
states <- generateState(net)
state_table <- getTransitionTable(net)
attractors <- getAttractors(net)
# Print the states
print(attractors)
# Print the states
print(attractors)
attractorsToLaTeX(attractorInfo,
subset,
title = "",
grouping = list(),
plotFixed = TRUE,
onColor = "[gray]{0.9}",
offColor = "[gray]{0.6}",
reverse = FALSE,
file = "attractors.tex")
attractorInfo <- getAttractors(net)
attractorsToLaTeX(attractorInfo,
subset,
title = "",
grouping = list(),
plotFixed = TRUE,
onColor = "[gray]{0.9}",
offColor = "[gray]{0.6}",
reverse = FALSE,
file = "attractors.tex")
# Install and load the BoolNet package
if (!require(BoolNet)) {
install.packages("BoolNet")
library(BoolNet)
}
# Define the Boolean network with the correct header
network <- "
targets, factors
A, C
B, A | C
C, B
"
# Write the network rules to a file
writeLines(network, "network.txt")
# Load the network from the file
net <- loadNetwork("network.txt")
gc()
gc()
gc()
# Install and load the BoolNet package
if (!require(BoolNet)) {
install.packages("BoolNet")
library(BoolNet)
}
# Define the Boolean network with the correct header
network <- "
targets, factors
A, C
B, A | C
C, B
"
# Write the network rules to a file
writeLines(network, "network.txt")
# Load the network from the file
net <- loadNetwork("network.txt")
# Find the attractors of the network
attractors <- getAttractors(net)
# Print the attractors
print(attractors)
# Get the state transition table
transitionTable <- getTransitionTable(attractors)
# Print the state transition table
print(transitionTable)
# Plot the state transition graph
plotStateGraph(attractors,layout = layout_with_fr, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5, main = "State Transition Graph")
?plotStateGraph
# Plot the state transition graph
plotStateGraph(attractors,layout = layout.kamada.kawai, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5, main = "State Transition Graph")
# Plot the state transition graph
plotStateGraph(attractors,layout = layout.fruchterman.reingold, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5, main = "State Transition Graph")
# Plot the state transition graph
plotStateGraph(attractors, main = "State Transition Graph", layout = layout.fruchterman.reingold, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5)
# Plot the state transition graph
plotStateGraph(attractors, main = "State Transition Graph", layout = layout_with_kk, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5)
?plotStateGraph
# plotNetworkWiring(net,layout = "circle", vertex.label.cex = 1.5, vertex.size = 30, edge.width = 2, edge.label.cex = 1.5, edge.label.color = "black", vertex.label.color = "black", vertex.color = "lightblue", edge.color = "black", main = "Network Wiring Diagram")
plotNetworkWiring(net,layout = layout.fruchterman.reingold,plotIt = TRUE, main = "Network Wiring Diagram")
plot(attractors, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
getwd()
setwd("ND/BE_MT/no_backup/courses/cs50r/")
list.files()
setwd("week_1/")
list.files
list.files()
setwd("l1")
list.files()
file.edit("hello.R")
list.files()
dir.create("prac")
setwd("prac/")
file.create("l1.R")
file.edit("l1.R")
print("hello, world!")
a <- readlines("What is your name?")
a <- readline("What is your name?")
print(paste("hello", a))
a <- readline("What is your name? ")
print(paste("hello", a))
source("~/ND/BE_MT/no_backup/courses/cs50r/week_1/l1/prac/l1.R")
ls()
?paste
setwd("../")
list.files()
file.edit("count.R")
getwd()
rm(list=ls())
getwd()
setwd("../l1/prac/")
votes <- read.table("../votes.csv")
View(votes)
votes <- read.table("../votes.csv", sep=",")
View(votes)
votes <- read.table("../votes.csv", sep=",", header=TRUE)
View(votes)
# votes <- read.table("../votes.csv", sep=",", header=TRUE)
votes <- read.csv("../votes.csv")
View(votes)
votes[, 2]
votes[, 1]
votes[, 'poll']
# votes[, 'poll']
votes$poll
# votes[, 'poll']
votes$poll[0] # the output is an vector
# votes[, 'poll']
votes$poll[1] # the output is an vector
# votes[, 'poll']
votes$poll[2] # the output is an vector
sum(votes$poll)
votes$total <- votes$poll + votes$mail
View(votes)
View(votes)
typeof(votes$poll)
class(votes$poll)
class(votes$candidate)
class(votes[1])
class(votes[1, ])
class(votes)
class(votes$poll)
getwd()
setwd("../")
list.files()
setwd("l1")
dir.create("shorts")
setwd("shorts/")
list.files()
file.create("spacecraft.R")
file.edit("spacecraft.R")
source("~/ND/BE_MT/no_backup/courses/cs50r/week_1/l1/shorts/spacecraft.R")
spacecraft$name # this oututs an vector
spacecraft$name # this outputs an character vector
spacecraft$distance # this outputs an integer vector
typeof(spacecraft$distance) # this outputs an integer vector
as.integer((spacecraft$distance)) # this outputs an integer vector
typeof(as.integer((spacecraft$distance))) # this outputs an integer vector
(spacecraft$distance) # this outputs an integer vector
spacecraft[1]
spacecraft[, 1]
spacecraft[[1]]
spacecraft
# How to manually set row names
spacecraft1 <- data.frame(
row.names = c("Voyager 1", "Voyager 2", "Pioneer 1"),
distance = c(163, 136, 80),
type = c("Probe", "Probe", "Probe")
)
spacecraft1
spacecraft1["Voyager 1", ]
dir()
dir()
file.create("vectors.R")
file.edit("vectors.R")
# c stands for combine
a = c('Hello', 'Neeraj')
a
# How to repeate a vector
rep(a, time=2)
rep(a, each = 2) # to repeat each value of the vector.
numbers <- c(1,2,3,4,5,6,7,8,9,10)
numbers
numbers <- c(1:10)
numbers1 <- c(1:10)
numbers1
numbers1 < 1:10
numbers1 <- 1:10
numbers1
numbers2 <- seq(from=1, to=10, by=2)
numbers2
# Get vector of specific length
numbers3 <- seq(from = 1, to = 10, length.out = 4)
numbers3
dir()
setwd("../../")
dir()
setwd("../")
dir()
setwd("week_2/")
dir()
setwd("l2")
dir()
file.create("prac.R")
file.edit("prac.R")
# RData file can store R data structure
load("temps.RData")
temps
mean(temps) # to find the average of temperature
temp[c(2, 4, 7)]
temps[c(2, 4, 7)]
temps[-c(2, 4, 6)]
temps < 0
temps[temps < 0]
temps[temps > 60]
temps[-(temps < 0)]
temps[!(temps < 0)]
temps[!(temps < 0 | temps > 60)]
# Logical Operators
# & (ampersand) = AND,
# | (pipe) = OR, for vectors of logicals
# to exclude outlier
temps[-(temps < 0 | temps > 60)]
temps[-which(temps < 0 | temps > 60)]
# to exclude outlier
temps[-(temps < 0 | temps > 60)]
# to exclude outlier
temps[!(temps < 0 | temps > 60)]
temps[-which(temps < 0 | temps > 60)]
no_outliers <- temps[!(temps > 0 & temps < 60)]
no_outliers
no_outliers <- temps[(temps > 0 & temps < 60)]
no_outliers
save(no_outliers, file='no_outliers.RData')
outliers <- temps[(temps < 0 & temps > 60)]
outliers
outliers <- temps[(temps < 0 & temps > 60)]
outliers
# RData file can store R data structure
load("temps.RData")
outliers <- temps[(temps < 0 & temps > 60)]
outliers
no_outliers <- temps[(temps > 0 | temps < 60)]
no_outliers
no_outliers <- temps[!(temps < 0 | temps > 60)]
no_outliers
save(no_outliers, file='no_outliers.RData')
outliers <- temps[(temps < 0 | temps > 60)]
outliers
save(outliers, file='outliers.RData')
rm(list=ls())
chicks <- read.csv('chicks.csv')
View(chicks)
casein_filter <- chicks$chick == 'casein'
chicks[casein_filter]
casein_filter <- chicks$feed == 'casein'
chicks[casein_filter]
casein_filter <- chicks$feed = 'casein'
casein_filter <- (chicks$feed == 'casein')
chicks[casein_filter]
casein_filter
chicks[casein_filter, ]
mean(chicks$weight)
mean(chicks$weight, na.rm=TRUE)
mean_weight <- mean(chicks$weight, na.rm = TRUE)
print(paste("The avergae weight:", mean_weight), 'grams')
chicks <- read.csv('chicks.csv')
mean_weight <- mean(chicks$weight, na.rm = TRUE)
print(paste("The avergae weight:", mean_weight), 'grams')
print(paste("The avergae weight:", mean_weight, 'grams')
mean_weight <- mean(chicks$weight, na.rm = TRUE)
print(paste('The avergae weight:', mean_weight, 'grams')
q()
mean_weight <- mean(chicks$weight, na.rm = TRUE)
print(paste('The avergae weight:', mean_weight, 'grams'))
################################################################################
chicks <- read.csv('chicks.csv')
chicks <- subset(chicks, !is.na(weight))
# Unique value of feed
feed_options <- unique(chicks$feed)
# Format Options
formated_options <- paste0(1:length(feed_options), ". ", feed_options)
# select options
cat(formated_options, sep ="\n")
feed_choice <- as.integer(readline("Feed type:"))
if (feed_choice > 6 || feed_choice < 1) {
print("Invalid Choice.")
} else {
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
}
getwd()
setwd("../")
dir()
dir.create('shorts')
setwd("shorts/")
file.create('lists.R')
file.edit('lists.R')
# vector of names
name <- c('Alice', 'Bob', 'Charlie')
# vector of ages
ages <- c(19, 45, 31)
names
# vector of names
names <- c('Alice', 'Bob', 'Charlie')
# vector of ages
ages <- c(19, 45, 31)
names
ages
typeof(ages)
class(ages)
# create a list
people <- list(names, ages)
people
people[1]
people[1][1]
people[[1]]
people[[1]][1]
people[[2]][2]
names(people) <- c('names', 'ages')
people
people$names
people$names
people$ages
df <- data.frame(people)
df
file.create('weather.R')
file.edit("weather.R")
temps <- c(60, 55, 50, 60, 60, 55, 65, 60, 60)
rm(list=ls())
temps <- c(60, 55, 50, 60, 60, 55, 65, 60, 60)
weather <- matrix(
temps,
nrow = 3,
ncol = 3
)
weather
weather[1, ]
weather[, 1] # 1st column
### Array
temps <- c(60,55,50,60,60,55,65,60,60,55,50,50,60, 55, 50, 65, 60, 55, 55, 50, 50, 55, 55, 50, 55, 55, 55)
dir()
save(temps, file='temps.RData')
### Array
load(temps.RData)
### Array
load('temps.RData')
temps
array(
temps,
dim = c(3, 3, 3)
)
weather[,,1]
weather[, , 1] # 1st matrix
weather <- array(
temps,
dim = c(3, 3, 3)
)
weather[, , 1] # 1st matrix
weather[, , 2] # 2nd matrix
?matrix
?array
weather <- matrix(
temps,
nrow = 3,
ncol = 3
)
### Matrix
temps <- c(60, 55, 50, 60, 60, 55, 65, 60, 60)
weather <- matrix(
temps,
nrow = 3,
ncol = 3
)
weather
?matrix
rm(list=ls())
