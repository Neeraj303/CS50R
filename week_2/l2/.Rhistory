# BE221 Assignment 1
# Submitted by Neeraj Dhandia, 22808
install.packages('IRkernel')
ok
library(BoolNet)
vignette("BoolNet_package_vignette")
getwd()
cd ND
ls
ls
getwd()
# Load the BoolNet package
library(BoolNet)
# Define the network
network <- "
targets, factors
Gene1, Gene3
Gene2, Gene1 or Gene3
Gene3, gene2
"
# Write the network to a file
writeLines(network, con = "network.txt")
# Load the network
net <- loadNetwork("network.txt")
# Define the network
network <- "
targets, factors
Gene1, Gene3
Gene2, Gene1 or Gene3
Gene3, Gene2
"
# Write the network to a file
writeLines(network, con = "network.txt")
# Load the network
net <- loadNetwork("network.txt")
# Define the network
network <- "
targets, factors
Gene1, Gene3
Gene2, Gene1 | Gene2
Gene3, Gene2
"
# Write the network to a file
writeLines(network, con = "network.txt")
# Load the network
net <- loadNetwork("network.txt")
# Simulate the network
states <- generateState(net)
state_table <- getTransitionTable(net)
attractors <- getAttractors(net)
# Print the states
print(attractors)
# Print the states
print(attractors)
attractorsToLaTeX(attractorInfo,
subset,
title = "",
grouping = list(),
plotFixed = TRUE,
onColor = "[gray]{0.9}",
offColor = "[gray]{0.6}",
reverse = FALSE,
file = "attractors.tex")
attractorInfo <- getAttractors(net)
attractorsToLaTeX(attractorInfo,
subset,
title = "",
grouping = list(),
plotFixed = TRUE,
onColor = "[gray]{0.9}",
offColor = "[gray]{0.6}",
reverse = FALSE,
file = "attractors.tex")
# Install and load the BoolNet package
if (!require(BoolNet)) {
install.packages("BoolNet")
library(BoolNet)
}
# Define the Boolean network with the correct header
network <- "
targets, factors
A, C
B, A | C
C, B
"
# Write the network rules to a file
writeLines(network, "network.txt")
# Load the network from the file
net <- loadNetwork("network.txt")
gc()
gc()
gc()
# Install and load the BoolNet package
if (!require(BoolNet)) {
install.packages("BoolNet")
library(BoolNet)
}
# Define the Boolean network with the correct header
network <- "
targets, factors
A, C
B, A | C
C, B
"
# Write the network rules to a file
writeLines(network, "network.txt")
# Load the network from the file
net <- loadNetwork("network.txt")
# Find the attractors of the network
attractors <- getAttractors(net)
# Print the attractors
print(attractors)
# Get the state transition table
transitionTable <- getTransitionTable(attractors)
# Print the state transition table
print(transitionTable)
# Plot the state transition graph
plotStateGraph(attractors,layout = layout_with_fr, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5, main = "State Transition Graph")
?plotStateGraph
# Plot the state transition graph
plotStateGraph(attractors,layout = layout.kamada.kawai, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5, main = "State Transition Graph")
# Plot the state transition graph
plotStateGraph(attractors,layout = layout.fruchterman.reingold, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5, main = "State Transition Graph")
# Plot the state transition graph
plotStateGraph(attractors, main = "State Transition Graph", layout = layout.fruchterman.reingold, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5)
# Plot the state transition graph
plotStateGraph(attractors, main = "State Transition Graph", layout = layout_with_kk, vertex.size = 4, vertex.label.dist = 0.5, vertex.color = "red", edge.arrow.size = 0.5)
?plotStateGraph
# plotNetworkWiring(net,layout = "circle", vertex.label.cex = 1.5, vertex.size = 30, edge.width = 2, edge.label.cex = 1.5, edge.label.color = "black", vertex.label.color = "black", vertex.color = "lightblue", edge.color = "black", main = "Network Wiring Diagram")
plotNetworkWiring(net,layout = layout.fruchterman.reingold,plotIt = TRUE, main = "Network Wiring Diagram")
plot(attractors, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
getwd()
setwd('ND/BE_MT/no_backup/courses/cs50r/l1/')
ls
list.files()
file.create('hello.R')
list.files()
print("Hello World!")
print("Hello World!")
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/hello.R", echo=TRUE)
name <- readline("What is your name? ")
print("Hello", name)
print("Hello" + name)
print("Hello,"name)
print("Hello," name)
b <- paste("Hello, ", name)
print(b)
b <- paste("Hello,  ", name)
print(b)
b <- paste("Hello,", name)
print(b)
b <- paste("Hello,",  name)
print(b)
b <- paste("Hello,",     name)
print(b)
b <- paste("Hello,", name, sep="")
print(b)
b <- paste("Hello, ", name, sep="")
print(b)
?paste
c <- paste0("Hello, ", name)
print(c)
print(b)
# Function Composition
print(paste0("Hello, ", readline("What is your name? ")))
list.files()
file.create('count.R')
list.files()
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/count.R", echo=TRUE)
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/count.R", echo=TRUE)
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/count.R", echo=TRUE)
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/count.R")
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/count.R")
source("~/ND/BE_MT/no_backup/courses/cs50r/l1/count.R")
ls()
ls
ls()
file.create('tabulate.R')
rm (list = ls())
ls()
list.files()
list.files()
votes <- read.table('votes.csv')
view(votes)
views(votes)
View(votes)
votes <- read.table('votes.csv', sep=",")
View(votes)
votes <- read.table('votes.csv', sep=",", header=TRUE)
View(votes)
# to directly read csv file
votes <- read.csv('votes.csv')
View(votes)
rm (votes)
ls()
# to directly read csv file
votes <- read.csv('votes.csv')
View(votes)
print(sum(votes[,2]))
print(paste("Total Poll:", sum(votes[,2]))
print(paste("Total Poll:", sum(votes[,2])))
# R does not start from 0 index, as opposed to python
View(votes)
print(paste("Total Poll:", sum(votes[,2])))
votes$candidate
# similar way to the above task
print(paste("Total Poll: ", sum(votes$poll)))
votes[1,2]
# Vectors
name = votes$candidate
# Vector addition to find the total for each candidates
votes$poll + votes$mail
# Vector addition to find the total for each candidates
total_votes <- votes$poll + votes$mail
votes$total <- total_votes
# To save the file
write.csv(votes, 'total.csv')
list.files()
View('total.csv')
# To save the file
write.csv(votes, 'total.csv', row.names=FALSE)
colnames(votes) # to knwo all the column names
rownames(votes) # to access the row names
create.file('voters.R')
file.create('voters.R')
url <- "https://github.com/fivethirtyeight/data/raw/master/non-voters/nonvoters_data.csv"
voters <- read.csv('url')
voters <- read.csv(url)
Vuew(voters)
View(voters)
nrows(voters) # total number of rows in the dataframe
ncolumns(voters) # total number of columns in the dataframe
nrow(voters) # total number of rows in the dataframe
ncolumn(voters) # total number of columns in the dataframe
ncol(voters) # total number of columns in the dataframe
voters[, "voter_category"] # or voters$voter_category
unique(voters[, "voter_category"]) # or voters$voter_category
unique(voters$Q22)
#factor
factor(voters$Q21)
factor(voter$Q21, label = c("?", "YES", "NO", "Unsure"))
factor(voters$Q21, label = c("?", "YES", "NO", "Unsure"))
#Exclude
factor(
voters$Q21,
label = c("?", "YES", "NO", "Unsure"),
exclude = c(-1)) #give specific label to each label
#Exclude
factor(
voters$Q21,
label = c("YES", "NO", "Unsure"),
exclude = c(-1)) #give specific label to each label
cd ../
setwd(../)
setwd('../')
dir.create('l2')
list.files()
setwd('l2')
list.files()
file.create('temps.R')
load('temps.RData')
load("temps.RData")
list.files()
load("temps.RData")
mean(temps)
temps
# to get multiple values
temps[c(2, 4, 7)]
# to select complementary to it
temps[-c(2,4,7)]
#Logicals
temps[temps > temps[2] ]
#Logicals
temps > temps[2]
# to know the index where the logical is TRUE
which(temps< 0)
temps < 0 and temps > 60
temps < 0 & temps > 60
temps
temps < 0 & temps > 60
temps[temps < 0 & temps > 60]
temps[temps < 0 && temps > 60]
temps[temps < 0 | temps > 60]
which(temps < 0 | temps > 60)
# to know the index values where the logical is TRUE
which(temps< 0)
which(temps < 0 | temps > 60)
# any, all
any(temps < 0 | temps > 60)
temps[which(temps <0 | temps > 60)]
temps[(temps <0 | temps > 60)]
filter <- (temps < 0 | temps > 60)
temps[filter]
filter <- !(temps < 0 | temps > 60)
temps[filter]
filter <- -(temps < 0 | temps > 60)
temps[filter]
filter < -(temps < 0 | temps > 60)
temps[filter]
filter < -(temps < 0 | temps > 60)
temps[filter]
filter < !(temps < 0 | temps > 60)
temps[filter]
# both gives the same output
temps[(temps <0 | temps > 60)]
temps[which(temps <0 | temps > 60)]
filter <- (temps < 0 | temps > 60)
temps[filter]
filter <- !(temps < 0 | temps > 60)
temps[filter]
temps[-which(temps <0 | temps > 60)]
no_outliers <- temps[(temps > 0 & temps < 60)]
no_outliers
outliers <- temps[!(temps > 0 & temps < 60)]
outliers
save(outliers, file='outliers.RData')
list.files()
save(no_outliers, file='no_outliers.RData')
list.files()
file.create('chicks.R')
list.files()
read.csv('chicks.csv')
chicks_data <- read.csv('chicks.csv')
View(chicks_data)
chicks_data.ncols
nrow(chicks_data)
ncol(chicks_data)
colnames(chicks_data)
rownames(chicks_data)
mean_wieght <- mean(chicks_data)
mean_wieght <- mean(chicks_data$weight)
print(paste("The avergae weight: ", mean_weight)
print(paste("The avergae weight: ", mean_weight))
print(paste("The avergae weight: ", mean_weight))
mean_weight <- mean(chicks_data$weight)
print(paste("The avergae weight: ", mean_weight))
mean_weight <- mean(chicks_data$weight)
print(paste("The avergae weight: ", mean_weight))
mean(chicks_data$weight)
sum(chicks_data$weight)
sum(chicks_data[,3])
print(paste("The avergae weight: ", mean_weight))
(chicks_data[,3])
mean_weight <- mean(chicks$weight, na.rm = TRUE)
ls()
rm(list = ls())
ls()
chicks <- read.csv('chicks.csv')
View(chicks)
nrow(chicks)
ncol(chicks)
colnames(chicks)
mean_weight <- mean(chicks$weight, na.rm = TRUE)
print(paste("The avergae weight:", mean_weight))
mean(weight[1:4])
mean(chicks[1:4])
mean(chicks[4,])
(chicks[4,])
(chicks[1:,])
# to get multiple rows
chicks[c(1,2,3), ]
# to get multiple rows
casein_chicks <- chicks[c(1,2,3), ]
mean(casein_chicks$weight)
unique(chicks$feed)
casein_chicks$feed == "fava"
chicks$feed == "fava"
chicks[chicks$feed == "fava"]
casein_chicks <-chicks[1:3,]
casein_chicks
unique(rownames(chicks))
unique(chicks$feed)
chicks$feed == 'fava'
chicks$feed == 'casein'
chicks[chicks$feed == 'casein',]
filter <- chicks$feed == 'casein'
chicks[filter,]
filter <- chicks$feed == 'casein'
casein_chicks <- chicks[filter,]
mean(casein_chicks$weight)
# to remove NA values
chicks[chicks$weight != NA]
# to remove NA values
chicks[chicks$weight != NA, ]
# to remove NA values
chicks[chicks$weight == NA, ]
# to remove NA values
#logical functions: is.infinite, is.na, is.nan, is.null
is.na(chicks$weight)
# to remove NA values
#logical functions: is.infinite, is.na, is.nan, is.null
which(is.na(chicks$weight))
chicks[filter, ]
# to remove NA values
#logical functions: is.infinite, is.na, is.nan, is.null
filter <- !which(is.na(chicks$weight))
chicks[filter, ]
# to remove NA values
#logical functions: is.infinite, is.na, is.nan, is.null
filter <- !is.na(chicks$weight)
chicks[filter, ]
# subset to access the same task above
chicks <- subset(chicks, !is.na(weight))
View(chicks)
soybean_chicks <- subset(chicks, feed == 'soybean')
View(soybean)
soybean_chicks
rownames(chicks) <- NULL
rownames(chicks)
soybean_chicks <- subset(chicks, feed == 'soybean')
soybean_chicks
rownames(chicks) <- NULL
soybean_chicks <- subset(chicks, feed == 'soybean')
soybean_chicks
rownames(chicks)
rownames(chicks) <- NULL
rownames(chicks)
chicks <- read.csv('chicks.csv')
# Number of NA in the dataset
is.na(chicks$weight)
# Number of NA in the dataset
sum(is.na(chicks$weight))
list.files()
################################################################################
chicks <- read.csv('chicks.csv')
View(chicks)
rm(list=ls())
ls()
chicks <- subset(chcks, !is.na(weight))
chicks <- subset(chicks, !is.na(weight))
################################################################################
chicks <- read.csv('chicks.csv')
chicks <- subset(chicks, !is.na(weight))
# Uique value of feed
feed_options <- unique(chicks$feed)
feed_options
# Format Options
formated_options <- paste0(1:length(feed_options), ". ", feedoptions)
# Format Options
formated_options <- paste0(1:length(feed_options), ". ", feed_options)
feed_options
formated_options
# select options
cat(formated_options, "\n")
# select options
cat(formated_options, sep ="\n")
feed_choice <- as.integer(readline("Feed type:"))
# select options
cat(formated_options, sep ="\n")
feed_choice <- as.integer(readline("Feed type:"))
if (feed_choice > 6 && feed_choice < 1) {
print("Invalid Choice")
} else {
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
}
feed_choice <- as.integer(readline("Feed type:"))
if (feed_choice > 6 || feed_choice < 1) {
print("Invalid Choice.")
} else {
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
}
list.files()
###############################################################################
Q1 <- read.csv('Q1.csv')
###############################################################################
Q1 <- read.csv('Q1.csv')
Q2 <- read.csv('Q2.csv')
Q3 <- read.csv('Q3.csv')
Q4 <- read.csv('Q4.csv')
total_sales <- rbind(Q1, Q2, Q3, Q4)
View(total_sales)
Q1$quarter <- "Q1"
View(Q1)
Q2 <- read.csv('Q2.csv')
Q2$quarter <- "Q2"
Q3 <- read.csv('Q3.csv')
Q3$quarter <- "Q3"
Q4 <- read.csv('Q4.csv')
Q4$quarter <- "Q4"
Q1
total_sales <- rbind(Q1, Q2, Q3, Q4)
View(total_sales)
total_sales <- rbind(Q1, Q2, Q3, Q4)
total_sales$value <- ifelse(total_sales$sales_amount > 100, "High Value", "Regular")
View(total_sales)
total_sales$value <- ifelse(total_sales$sale_amount > 100, "High Value", "Regular")
View(total_sales)
sum(total_sales$value == "High Value")
